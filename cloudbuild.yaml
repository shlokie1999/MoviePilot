steps:
  # Install phase
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "in the install phase"
        apt-get update && apt-get -y install jq
        apt-get install -y wget
        apt-get install -y maven
        
  # Pre-build phase: Instead of installing Nuclei via Go, pull and use the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['pull', 'projectdiscovery/nuclei']

  # Clone nuclei-templates
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/projectdiscovery/nuclei-templates.git']

  # Nuclei help
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run','--rm','projectdiscovery/nuclei','-h']

  # #Run nuclei scan using the Docker image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args:
  #     - 'run'
  #     - '--rm'
  #     - '-v'
  #     - '/workspace:/app'
  #     - 'projectdiscovery/nuclei'
  #     - '-l'
  #     - '/app/target_urls.txt'
  #     - '-t'
  #     - '/app/nuclei-templates/'
  #     - '-je'
  #     - '/app/scan_report.json'
  #     - '-c' # flag to support parallel scanning for optimization. 'c' represents concurrency.
  #     - '50'
  #     - '-rl'
  #     - '100'  
  #     - '-rlm'
  #     - '6000' 
  #     - '-bs' # maximum number of hosts to be analyzed in parallel per template
  #     - '20'   
  #     - '-hbs' # maximum number of headless hosts to be analyzed in parallel per template
  #     - '8'   
  #     - '-headc' # maximum number of headless templates to be executed in parallel
  #     - '5'
  # Run Nuclei scan and export critical findings to JSON
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'run'
      - '--rm'
      - '-v'
      - '/workspace:/app'
      - 'projectdiscovery/nuclei'
      - '-silent'
      - '-l'
      - '/app/target_urls.txt'
      - '-t'
      - '/app/nuclei-templates'
      - '-severity'
      - 'critical'
      - '-je'
      - '/app/nuclei_output_file.json'

#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         apt-get update && apt-get install -y jq
#         _CRITICAL_ENTRIES=$(jq '.[] | select(.info.severity == "low")' /workspace/scan_report.json)
#         echo $_CRITICAL_ENTRIES
#         _CRITICAL_COUNT=$(echo "$_CRITICAL_ENTRIES" | jq -s '. | length')
#         echo $
#         echo "Found $_CRITICAL_COUNT critical vulnerabilities"
#         if [ "$_CRITICAL_COUNT" -gt 0 ]; then
#             curl -X POST \
#                -H "Authorization: token $$_GITHUB_TOKEN " \
#                -H "Accept: application/vnd.github.v3+json" \
#                -d '{"title": "Critical finding found. Please review the findings in report and address the issues."}' \
#                https://api.github.com/repos/shlokie1999/MoviePilot/issues
#         fi
#     secretEnv: ['_GITHUB_TOKEN']
# availableSecrets:
#   secretManager:
#   - versionName: projects/364895990307/secrets/mailgun-api-key/versions/2
#     env: '_GITHUB_TOKEN'


  # - name: 'gcr.io/cloud-builders/docker'
  #   args:
  #     - 'run'
  #     - '--rm'
  #     - '-v'
  #     - '/workspace:/app'
  #     - 'projectdiscovery/nuclei'
  #     - '-u'
  #     - '/app/https://success.qualys.com/'
  #     - '-t'
  #     - '/app/critical-check.yaml'
  #     - '-o'
  #     - '/app/custom_scan_report.json'
      

artifacts:
  objects:
    location: 'gs://sample-debug/'  # Update this with your bucket name
    paths: ['nuclei_output_file.json']


      
